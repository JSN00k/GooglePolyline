//
//  googlePolylineTestTests.m
//  googlePolylineTestTests
//
//  Created by James Snook on 21/04/2014.
//  Copyright (c) 2014 James Snook. All rights reserved.
//

double rawCoords[] = {
  37.334150, -122.078384, 37.334280, -122.078720, 37.334421, -122.079046,
  37.334572, -122.079364, 37.334737, -122.079675, 37.334922, -122.079975,
  37.335111, -122.080261, 37.335314, -122.080550, 37.335522, -122.080823,
  37.335739, -122.081107, 37.335956, -122.081384, 37.336172, -122.081660,
  37.336385, -122.081931, 37.336599, -122.082204, 37.336803, -122.082478,
  37.337005, -122.082759, 37.337203, -122.083042, 37.337396, -122.083329,
  37.337581, -122.083626, 37.337755, -122.083926, 37.337931, -122.084227,
  37.338109, -122.084541, 37.338284, -122.084845, 37.338455, -122.085152,
  37.338622, -122.085457, 37.338799, -122.085775, 37.338967, -122.086089,
  37.339136, -122.086403, 37.339300, -122.086703, 37.339476, -122.087011,
  37.339650, -122.087321, 37.339818, -122.087623, 37.339984, -122.087929,
  37.340149, -122.088240, 37.340315, -122.088561, 37.340466, -122.088863,
  37.340617, -122.089179, 37.340772, -122.089497, 37.340927, -122.089831,
  37.341072, -122.090151, 37.341219, -122.090457, 37.341379, -122.090772,
  37.341542, -122.091084, 37.341714, -122.091389, 37.341895, -122.091676,
  37.342089, -122.091957, 37.342292, -122.092223, 37.342496, -122.092465,
  37.342708, -122.092712, 37.342914, -122.092957, 37.343124, -122.093203,
  37.343328, -122.093434, 37.343537, -122.093680, 37.343746, -122.093920,
  37.343950, -122.094155, 37.344157, -122.094390, 37.344346, -122.094637,
  37.344540, -122.094896, 37.344725, -122.095164, 37.344893, -122.095438,
  37.345051, -122.095726, 37.345208, -122.096012, 37.345350, -122.096319,
  37.345490, -122.096638, 37.345624, -122.096953, 37.345768, -122.097279,
  37.345909, -122.097608, 37.346049, -122.097943, 37.346190, -122.098288,
  37.346331, -122.098627, 37.346479, -122.098965, 37.346616, -122.099298,
  37.346764, -122.099634, 37.346908, -122.099975, 37.347052, -122.100322,
  37.347192, -122.100662, 37.347335, -122.100993, 37.347477, -122.101319,
  37.347625, -122.101651, 37.347777, -122.101963, 37.347940, -122.102274,
  37.348124, -122.102575, 37.348315, -122.102862, 37.348513, -122.103140,
  37.348722, -122.103402, 37.348948, -122.103654, 37.349184, -122.103896,
  37.349419, -122.104112, 37.349664, -122.104319, 37.349916, -122.104516,
  37.350169, -122.104709, 37.350422, -122.104902, 37.350680, -122.105097,
  37.350935, -122.105294, 37.351195, -122.105494, 37.351454, -122.105699,
  37.351701, -122.105898, 37.351945, -122.106109, 37.352183, -122.106338,
  37.352409, -122.106568, 37.352629, -122.106820, 37.352838, -122.107074,
  37.353043, -122.107347, 37.353228, -122.107612, 37.353401, -122.107890,
  37.353576, -122.108182, 37.353732, -122.108480, 37.353882, -122.108781,
  37.354028, -122.109091, 37.354163, -122.109415, 37.354285, -122.109738,
  37.354399, -122.110072, 37.354510, -122.110405, 37.354604, -122.110746,
  37.354701, -122.111097, 37.354786, -122.111441, 37.354869, -122.111785,
  37.354959, -122.112137, 37.355048, -122.112488, 37.355138, -122.112830,
  37.355222, -122.113179, 37.355321, -122.113528, 37.355434, -122.113870,
  37.355558, -122.114204, 37.355684, -122.114524, 37.355832, -122.114847,
  37.355983, -122.115161, 37.356143, -122.115468, 37.356306, -122.115771,
  37.356474, -122.116079, 37.356672, -122.116365, 37.356871, -122.116633,
  37.357075, -122.116899, 37.357281, -122.117156, 37.357500, -122.117411,
  37.357722, -122.117646, 37.357965, -122.117872, 37.358214, -122.118085,
  37.358466, -122.118292, 37.358723, -122.118485, 37.358995, -122.118662,
  37.359282, -122.118840, 37.359558, -122.119016, 37.359839, -122.119186,
  37.360120, -122.119355, 37.360407, -122.119520, 37.360693, -122.119696,
  37.360974, -122.119867, 37.361261, -122.120038, 37.361544, -122.120217,
  37.361820, -122.120418, 37.362079, -122.120623, 37.362333, -122.120844,
  37.362583, -122.121081, 37.362819, -122.121334, 37.363038, -122.121604,
  37.363243, -122.121886, 37.363443, -122.122183, 37.363626, -122.122487,
  37.363802, -122.122794, 37.363961, -122.123103, 37.364109, -122.123418,
  37.364242, -122.123747, 37.364363, -122.124078, 37.364472, -122.124417,
  37.364571, -122.124769, 37.364657, -122.125129, 37.364729, -122.125497,
  37.364788, -122.125863, 37.364835, -122.126239, 37.364867, -122.126616,
  37.364885, -122.126999, 37.364896, -122.127379, 37.364895, -122.127755,
  37.364896, -122.128145, 37.364895, -122.128518, 37.364901, -122.128897,
  37.364913, -122.129278, 37.364926, -122.129661, 37.364956, -122.130030,
  37.365002, -122.130398, 37.365058, -122.130763, 37.365135, -122.131120,
  37.365226, -122.131477, 37.365331, -122.131822, 37.365438, -122.132172,
  37.365549, -122.132530, 37.365655, -122.132879, 37.365762, -122.133225,
  37.365866, -122.133581, 37.365975, -122.133934, 37.366072, -122.134277,
  37.366176, -122.134620, 37.366280, -122.134964, 37.366373, -122.135305,
  37.366476, -122.135648, 37.366573, -122.135986, 37.366675, -122.136331,
  37.366782, -122.136672, 37.366892, -122.137008, 37.367006, -122.137347,
  37.367141, -122.137686, 37.367284, -122.138016, 37.367430, -122.138344,
  37.367590, -122.138662, 37.367762, -122.138981, 37.367948, -122.139296,
  37.368134, -122.139594, 37.368336, -122.139888, 37.368543, -122.140167,
  37.368762, -122.140437, 37.368984, -122.140692, 37.369215, -122.140940,
  37.369457, -122.141180, 37.369706, -122.141418, 37.369948, -122.141634,
  37.370192, -122.141862, 37.370438, -122.142092, 37.370685, -122.142314,
  37.370929, -122.142539, 37.371173, -122.142763, 37.371421, -122.142979,
  37.371670, -122.143202, 37.371910, -122.143419, 37.372156, -122.143642,
  37.372400, -122.143860, 37.372637, -122.144091, 37.372872, -122.144308,
  37.373113, -122.144519, 37.373363, -122.144727, 37.373614, -122.144960,
  37.373851, -122.145178, 37.374091, -122.145409, 37.374335, -122.145640,
  37.374573, -122.145887, 37.374812, -122.146119, 37.375038, -122.146363,
  37.375270, -122.146621, 37.375502, -122.146875, 37.375724, -122.147135,
  37.375956, -122.147399,
};

#import <XCTest/XCTest.h>
#import "polylineFunctions.h"

@interface googlePolylineTestTests : XCTestCase

@end

@implementation googlePolylineTestTests
{
  int coordCount;
  Coordinate *coords;
  int coordsCount;
}

- (void)setUp
{
    [super setUp];
    // Put setup code here. This method is called before the invocation of each test method in the class.
  coordsCount = (sizeof (rawCoords) / sizeof(double)) / 2;
  coords = malloc (sizeof(Coordinate) * coordsCount);
  for (int i = 0; i < coordsCount; ++i) {
    coords[i].latitude  = rawCoords[i * 2];
    coords[i].longitude = rawCoords[i * 2 + 1];
  }
}

- (void)tearDown
{
    // Put teardown code here. This method is called after the invocation of each test method in the class.
    [super tearDown];
}

- (void)testExample
{
    XCTFail(@"No implementation for \"%s\"", __PRETTY_FUNCTION__);
}

- (void)testStreaming {
  NSMutableString *streamedStr = [NSMutableString string];
  PolylineEncoder *encoder = PolylineEncoderCreate();
  for (int i = 0; i < coordsCount; ++i) {
    char result[11];
    unsigned charCount = PolylineEncoderGetEncodedCoordinate(encoder,
                                                             coords[i],
                                                             result);
    result[charCount] = '\0';
    [streamedStr appendFormat:@"%s", result];
  }
  
  PolylineEncoderFree(encoder);
  
  PolylineEncoder *decoder = PolylineEncoderCreate ();
  char buffer[128];
  NSUInteger usedLen;
  NSRange leftOver = NSMakeRange(0, [streamedStr length]);
  Coordinate *convertedCoords = malloc (sizeof(Coordinate) * coordsCount);
  Coordinate *convertedPtr = convertedCoords;
  unsigned decodedCount = 0;
  
  do {
    if (![streamedStr getBytes:buffer maxLength:127 usedLength:&usedLen
                 encoding:NSUTF8StringEncoding
                  options:0 range:leftOver
           remainingRange:&leftOver])
      break;
    
    buffer[usedLen] = '\0';
    
    Coordinate *decoded = PolylineEncoderGetDecodedCoordinates(decoder,
                                                               buffer,
                                                               &decodedCount);
    memcpy(convertedPtr, decoded, decodedCount * sizeof(Coordinate));
    convertedPtr += decodedCount;
  } while (YES);
  
  for (int i = 0; i < coordsCount; ++i) {
    BOOL success = convertedCoords[i].latitude == round (coords[i].latitude * 1e5) * 1e-5
    && convertedCoords[i].longitude == round(coords[i].longitude * 1e5) * 1e-5;
    XCTAssert (success,
              @"Assertion failure on coordinate %d", i);
  }
}

@end
